/*
 * Reviews API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Review;
import org.junit.Test;
import org.junit.Before;

import java.util.List;

import static org.junit.Assert.*;

/**
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();


    @Before
    public void changeBasePath(){
    	api.getApiClient().setBasePath("http://localhost:8080/reviewsapi/v1.0");
    }
    
    /**
     * 
     *
     * Retrieves a list of reviews in the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reviewsGetTest() throws ApiException {
        List<Review> response = api.reviewsGet();
        
        assertEquals(4, response.size());
    }
    
    /**
     * 
     *
     * Adds a new review to the list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reviewsPostTest() throws ApiException {
    	
        Review review = new Review();
        review.setId("R004");
        review.setTitle("Spring REST Review");
        review.setSummary("Spring REST Review...");
        review.setCreatedDate("03/01/2016");
        
        try {
			api.reviewsPost(review);
			fail("Expected an exception.");
		} catch (ApiException ex) {
			assertEquals(409,ex.getCode());
		   assertEquals("Duplicate reivew ID found",ex.getResponseBody());
		}
        
        review.setId("R005");
        Review postedReview = api.reviewsPost(review);
        assertEquals(review, postedReview);
    }
    
    /**
     * 
     *
     * Deletes an individual review
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reviewsReviewidDeleteTest() throws ApiException {
        String reviewid = null;
        api.reviewsReviewidDelete(reviewid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves an individual review
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reviewsReviewidGetTest() throws ApiException {
        String reviewid = "R001";
        Review response = api.reviewsReviewidGet(reviewid);

        assertEquals("R001", response.getId());
        
        reviewid = "R006";
        
        try {
        	api.reviewsReviewidGet(reviewid);
			fail("Expected an exception.");
		} catch (ApiException ex) {
			assertEquals(404,ex.getCode());
		   assertEquals("No review with that ID found",ex.getResponseBody());
		}
                
    }
    
    /**
     * 
     *
     * Review update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reviewsReviewidPutTest() throws ApiException {
        String reviewid = null;
        Review review = null;
        api.reviewsReviewidPut(reviewid, review);

        // TODO: test validations
    }
    
}
